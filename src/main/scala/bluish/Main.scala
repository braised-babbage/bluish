package bluish
import scala.scalajs.js.annotation.{JSExport, JSExportTopLevel}
import org.scalajs.dom
import dom.document
import org.scalajs.dom.html
import scala.util.Random



@JSExportTopLevel("ScalaJSExample")
object ScalaJSExample {

  val levels = Array(
    """
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
..................................................................###...........
...................................................##......##....##+##..........
....................................o.o......##..................#+++#..........
.................................................................##+##..........
...................................#####..........................#v#...........
............................................................................##..
..##......................................o.o................................#..
..#.....................o....................................................#..
..#......................................#####.............................o.#..
..#..........####.......o....................................................#..
..#..@.......#..#................................................#####.......#..
..############..###############...####################.....#######...#########..
..............................#...#..................#.....#....................
..............................#+++#..................#+++++#....................
..............................#+++#..................#+++++#....................
..............................#####..................#######....................
................................................................................
................................................................................
""",
    """
................................................................................
................................................................................
....###############################.............................................
...##.............................##########################################....
...#.......................................................................##...
...#....o...................................................................#...
...#................................................=.......................#...
...#.o........################...................o..o...........|........o..#...
...#.........................#..............................................#...
...#....o....................##########.....###################....##########...
...#..................................#+++++#.................#....#............
...###############....oo......=o.o.o..#######.###############.#....#............
.....#...............o..o.............#.......#......#........#....#............
.....#....................#############..######.####.#.########....########.....
.....#.............########..............#...........#.#..................#.....
.....#..........####......####...#####################.#..................#.....
.....#........###............###.......................########....########.....
.....#.......##................#########################......#....#............
.....#.......#................................................#....#............
.....###......................................................#....#............
.......#...............o...........................................#............
.......#...............................................o...........#............
.......#########......###.....############.........................##...........
.............#..................#........#####....#######.o.........########....
.............#++++++++++++++++++#............#....#.....#..................#....
.............#++++++++++++++++++#..........###....###...####.o.............#....
.............####################..........#........#......#.....|.........#....
...........................................#++++++++#......####............#....
...........................................#++++++++#.........#........@...#....
...........................................#++++++++#.........##############....
...........................................##########...........................
................................................................................
""")


  def update(s: State, dt: Double, keys: KeyState): State = {
    val actors = s.actors.map(a => a.update(dt, s, keys))
    var newState = State(s.level, actors, s.status)

    if (newState.status != Playing)
      return newState

    val player = newState.player

    if (s.level.touches(player.pos, player.size, Lava))
      return State(s.level, actors, Lost)

    for (actor <- actors) {
      if (actor != player && actor.overlaps(player)) {
        newState = actor.collide(newState)
      }
    }
    newState
  }





  @JSExport
  def main(): Unit = {

    val dt = 20.0 // milliseconds
    val ui = new DomUI()


    var i = 0
    val (level, actors) = Level.parse(levels(i))
    var state = State(level, actors, Playing)
    var endTime = 1.0

    ui.draw(state)
    def run() = state match {
      case State(_,_,Starting) => {
        i += 1
        if (i < levels.length) {
          endTime = 1.0
          ui.clear()
          val (level, actors) = Level.parse(levels(i))
          state = State(level, actors, Playing)
          ui.draw(state)
        }
        else println("you win!")
      }
      case State(_,_,Playing) => {
      // clear foreground
      // update state
      // draw
        state = update(state, dt/1000, ui.keys)
        ui.update(state)
        ui.scrollPlayerIntoView(state)
      }
      case State(level,actors,Won) => {
        if (endTime < 0)
          state = State(level,actors,Starting)
        else
          endTime -= dt/1000
      }
      case State(_,_,Lost) =>
        println("You lose :(")
    }

    dom.window.setInterval(() => run, dt)
  }
}
